module;

#include <memory>
#include <cstring>
#include <cstdio>
#include <filesystem>
#include <base/Assert.hh>
#include <base/Macros.hh>

export module base.fs;
import base;

export namespace base {
template <typename Ty>
concept CharBuffer = requires (Ty t, usz sz) {
    { t.data() } -> std::same_as<char*>;
    { t.size() } -> std::integral;
    { t.resize(sz) };
};

struct InputView : std::span<const std::byte> {
    using std::span<const std::byte>::span;
    using std::span<const std::byte>::operator=;

    // Allow construction from string view.
    constexpr InputView(std::string_view sv)
        : std::span<const std::byte>(
              reinterpret_cast<const std::byte*>(sv.data()),
              sv.size()
          ) {}

    // Allow construction from char buffer.
    constexpr InputView(const CharBuffer auto& buf)
        : std::span<const std::byte>(
              reinterpret_cast<const std::byte*>(buf.data()),
              buf.size()
          ) {}

    // Allow wrapping a compile-time constant char array.
    template <usz N>
    constexpr InputView(const char (&arr)[N])
        : std::span<const std::byte>(
              reinterpret_cast<const std::byte*>(arr),
              arr[N - 1] == '\0' ? N - 1 : N
          ) {}
};

struct OutputView : std::span<std::byte> {
    using std::span<std::byte>::span;
    using std::span<std::byte>::operator=;

    // Allow construction from char range.
    constexpr OutputView(std::span<char> buf)
        : std::span<std::byte>(
              reinterpret_cast<std::byte*>(buf.data()),
              buf.size()
          ) {}

    // Allow construction from char buffer.
    constexpr OutputView(CharBuffer auto& buf)
        : std::span<std::byte>(
              reinterpret_cast<std::byte*>(buf.data()),
              buf.size()
          ) {}
};

using InputVector = std::span<const InputView>;

/// Do NOT use this as a bitmask! Only ever supply at most one of
/// these. The values of the enumerators are an implementation detail.
enum struct OpenMode : u8 {
    /// Open the file for reading. The file must exist.
    Read = 1,

    /// Open the file for writing. Truncates the file if it
    /// exists, creates it if it does not.
    Write = 2,

    /// Same as Write, but does not perform truncation.
    Append = 4,

    /// Open the file for reading and writing.
    ReadWrite = Read | Write,

    /// Open the file for reading and appending.
    ReadAppend = Read | Write | Append,
};
} // namespace base

#define LIBBASE_USE_GENERIC_FILESYSTEM_IMPL
#ifdef LIBBASE_USE_GENERIC_FILESYSTEM_IMPL
#    include "Generic.inc"
#else
#    ifdef __linux__
#        include "Linux.inc"
#    else
#        include "Generic.inc"
#    endif
#endif

export namespace base {
/// A handle to a file on disk.
///
/// The file is closed when this goes out of scope. This should
/// only be used for actual files, not for (named) pipes, sockets,
/// etc.
class File : FileImpl {
    friend FileImpl;
    OpenMode open_mode;

public:
    using FileImpl::Path;
    using FileImpl::PathRef;

    /// Get the open mode of the file.
    [[nodiscard]] auto mode() const noexcept -> OpenMode { return open_mode; }

    /// Print to the file.
    template <typename ...Args>
    auto print(std::format_string<Args...> fmt, Args&&... args) noexcept -> Result<> {
        return write(std::format(fmt, std::forward<Args>(args)...));
    }

    /// Read from the file.
    ///
    /// \param into The buffer to read into. This will try to read
    ///        `into.size()` bytes from the file.
    /// \return A `Result` containing the number of bytes read, or an
    ///         error if the file could not be read from. A short read
    ///         is not an error and can happen if the file is smaller
    ///         than the buffer.
    auto read(OutputView into) noexcept -> Result<usz>;

    /// Rewind the file to the beginning.
    void rewind() noexcept;

    /// Get the size of this file.
    auto size() noexcept -> usz;

    /// Truncate or extend the file to a given size.
    auto resize(usz size) noexcept -> Result<>;

    /// Write to the file.
    auto write(InputView data) noexcept -> Result<>;

    /// Write to the file using scatter/gather I/O.
    auto writev(InputVector data) noexcept -> Result<>;

    /// Delete a file or directory.
    static auto Delete(PathRef path, bool recursive = false) -> Result<bool>;

    /// Check if a file exists.
    static auto Exists(PathRef path) noexcept -> bool;

    /// Open a file.
    ///
    /// \param path The path to the file.
    /// \param mode The mode to open the file with.
    /// \return A `Result` containing the opened file, or an error if
    ///         it could not be opened, for whatever reason.
    static auto Open(PathRef path, OpenMode mode = OpenMode::Read) noexcept -> Result<File>;

    /// Read an entire file into a string.
    template <CharBuffer Buffer>
    static auto ReadInto(PathRef path, Buffer& buffer) noexcept -> Result<> {
        auto sz = buffer.size();
        auto f = Try(Open(path, OpenMode::Read));
        buffer.resize(sz + f.size());

        // A short read is possible here if the file is being resized by
        // someone else; there is nothing we can really do about that, so
        // donâ€™t bother checking the size here.
        Try(f.read(std::span(buffer.data() + sz, f.size())));
        return {};
    }

    /// Read an entire file into a string.
    template <typename Buffer = std::string>
    static auto Read(PathRef path) noexcept -> Result<Buffer> {
        Buffer buffer;
        Try(ReadInto(path, buffer));
        return buffer;
    }

    /// Write data to a file on disk.
    static auto Write(PathRef path, InputView data) noexcept -> Result<>;
};
} // namespace base
